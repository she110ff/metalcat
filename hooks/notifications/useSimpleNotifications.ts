import { useEffect, useState, useRef } from "react";
import * as Notifications from "expo-notifications";
import { supabase } from "@/hooks/auth/api";
import { useAuth } from "@/hooks/useAuth";
import { useNotificationToken } from "./useNotificationToken";

// ÏïåÎ¶º Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

export function useSimpleNotifications() {
  const { user } = useAuth();
  const notificationListener = useRef<Notifications.Subscription | null>(null);
  const responseListener = useRef<Notifications.Subscription | null>(null);

  // ÏÉàÎ°úÏö¥ ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨ ÌõÖ ÏÇ¨Ïö©
  const {
    token: expoPushToken,
    isLoading,
    forceRegister,
  } = useNotificationToken();

  // Î†àÍ±∞Ïãú Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÎûòÌçº Ìï®Ïàò
  const registerForPushNotificationsAsync = async () => {
    if (!user) return;

    try {
      forceRegister();
    } catch (error) {
      console.error("ÌÜ†ÌÅ∞ Îì±Î°ù Ïã§Ìå®:", error);
    }
  };

  // ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå
  const [history, setHistory] = useState<any[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);

  const loadNotificationHistory = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from("notification_history")
        .select("*")
        .eq("user_id", user.id)
        .order("created_at", { ascending: false })
        .limit(50);

      if (error) {
        console.error("ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïã§Ìå®:", error);
        return;
      }

      setHistory(data || []);
      setUnreadCount(data?.filter((item: any) => !item.read_at).length || 0);
    } catch (error) {
      console.error("ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïò§Î•ò:", error);
    }
  };

  // ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAsRead = async (notificationId: string) => {
    if (!user) return;

    try {
      const { error } = await supabase
        .from("notification_history")
        .update({ read_at: new Date().toISOString() })
        .eq("id", notificationId)
        .eq("user_id", user.id);

      if (error) {
        console.error("ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:", error);
        return;
      }

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setHistory((prev) =>
        prev.map((item) =>
          item.id === notificationId
            ? { ...item, read_at: new Date().toISOString() }
            : item
        )
      );
      setUnreadCount((prev) => Math.max(0, prev - 1));
    } catch (error) {
      console.error("ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïò§Î•ò:", error);
    }
  };

  // Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAllAsRead = async () => {
    if (!user) return;

    try {
      const { error } = await supabase
        .from("notification_history")
        .update({ read_at: new Date().toISOString() })
        .eq("user_id", user.id)
        .is("read_at", null);

      if (error) {
        console.error("Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:", error);
        return;
      }

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setHistory((prev) =>
        prev.map((item) => ({ ...item, read_at: new Date().toISOString() }))
      );
      setUnreadCount(0);
    } catch (error) {
      console.error("Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨ Ïò§Î•ò:", error);
    }
  };

  // ÏïåÎ¶º Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
  useEffect(() => {
    if (!user) return;

    // Ïï±Ïù¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÏóê ÏûàÏùÑ Îïå ÏïåÎ¶ºÏùÑ Î∞õÎäî Î¶¨Ïä§ÎÑà
    notificationListener.current =
      Notifications.addNotificationReceivedListener((notification) => {
        console.log("üì± Ìè¨Í∑∏ÎùºÏö¥Îìú ÏïåÎ¶º ÏàòÏã†:", notification);

        // ÏÑúÎ≤ÑÏóêÏÑú Ïù¥ÎØ∏ Ï†ÄÏû•ÌïòÎØÄÎ°ú ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑúÎäî Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå
        // ÎåÄÏã† ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨Îßå ÏÉàÎ°úÍ≥†Ïπ®
        loadNotificationHistory();
      });

    // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏïåÎ¶ºÏùÑ ÌÉ≠ÌñàÏùÑ ÎïåÏùò Î¶¨Ïä§ÎÑà
    responseListener.current =
      Notifications.addNotificationResponseReceivedListener((response) => {
        console.log("üëÜ ÏïåÎ¶º ÌÉ≠Îê®:", response);

        // ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í≤ΩÎß§ IDÍ∞Ä ÏûàÏúºÎ©¥ Ìï¥Îãπ Í≤ΩÎß§Î°ú Ïù¥Îèô
        const auctionId =
          response.notification.request.content.data?.auction_id;
        if (auctionId) {
          // Ïó¨Í∏∞ÏÑú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï≤òÎ¶¨ (useRouter Îì± ÏÇ¨Ïö©)
          console.log("Í≤ΩÎß§ ÏÉÅÏÑ∏Î°ú Ïù¥Îèô:", auctionId);
          // router.push(`/auction-detail/${auctionId}`);
        }
      });

    // Ï¥àÍ∏∞ ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú
    loadNotificationHistory();

    // ÌÅ¥Î¶∞ÏóÖ
    return () => {
      if (notificationListener.current) {
        Notifications.removeNotificationSubscription(
          notificationListener.current
        );
      }
      if (responseListener.current) {
        Notifications.removeNotificationSubscription(responseListener.current);
      }
    };
  }, [user]);

  return {
    expoPushToken,
    history,
    unreadCount,
    isLoading,
    markAsRead,
    markAllAsRead,
    loadNotificationHistory,
    registerForPushNotificationsAsync,
  };
}
